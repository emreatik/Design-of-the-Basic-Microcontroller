module memory(clk,MAR,adc,IR);
input clk; 
input [15:0] adc [0:127];
input reg [15:0] IR;
input reg [11:0] MAR;
reg counter_128=0;
reg [15:0] data_memory [0:127];
reg reset=0;

always @(posedge clk)
begin

/*if(DWE)
begin
if(counter_128 < 128)
begin
data_memory[counter_128]=adc[counter_128];
counter_128=counter_128+1;
end
else
counter_128=0;
end

if(reset)
begin
data_memory=0;
counter_128=0;
end*/

data_memory[0]=0000000011111111;
data_memory[1]=0000000011111111;
data_memory[2]=0000000011111111;
data_memory[3]=0000000011111111;
data_memory[4]=0000000011111111;
data_memory[5]=0000000011111111;
data_memory[6]=0000000011111111;
data_memory[7]=0000000011111111;
data_memory[8]=0000000011111111;
data_memory[9]=0000000011111111;
data_memory[10]=0000000011111111;
data_memory[11]=0000000011111111;
data_memory[12]=0000000011111111;
data_memory[13]=0000000011111111;
data_memory[14]=0000000011111111;
data_memory[15]=0000000011111111;
data_memory[16]=0000000011111111;
data_memory[17]=0000000011111111;
data_memory[18]=0000000011111111;
data_memory[19]=0000000011111111;
data_memory[20]=0000000011111111;
data_memory[21]=0000000011111111;
data_memory[22]=0000000011111111;
data_memory[23]=0000000011111111;
data_memory[24]=0000000011111111;
data_memory[25]=0000000011111111;
data_memory[26]=0000000011111111;
data_memory[27]=0000000011111111;
data_memory[28]=0000000011111111;
data_memory[29]=0000000011111111;
data_memory[30]=0000000011111111;
data_memory[31]=0000000011111111;

if(IRE)
begin
begin
case(MAR)
000000000000:MAR=000110000000;//0
000000000001:MAR=001010000001;
000000000010:MAR=001010000010;
000000000011:MAR=001010000011;
000000000100:MAR=001010000100;
000000000101:MAR=001010000101;
000000000110:MAR=001010000110;
000000000111:MAR=001010000111;
000000001000:MAR=001010001000;
000000001001:MAR=001010001001;
000000001010:MAR=001010001010;
000000001011:MAR=001010001011;
000000001100:MAR=001010001100;
000000001101:MAR=001010001101;
000000001110:MAR=001010001110;
000000001111:MAR=001010001111;
000000010000:MAR=001010010000;
000000010001:MAR=001010010001;
000000010010:MAR=001010010010;
000000010011:MAR=001010010011;
000000010100:MAR=001010010100;
000000010101:MAR=001010010101;
000000010110:MAR=001010010110;
000000010111:MAR=001010010111;
000000011000:MAR=001010011000;
000000011001:MAR=001010011001;
000000011010:MAR=001010011010;
000000011011:MAR=001010011011;
000000011100:MAR=001010011100;
000000011101:MAR=001010011101;
000000011110:MAR=001010011110;
000000011111:MAR=001010011111;//31
000000100000:MAR=001111111110;
000000100001:MAR=001111111110;
000000100010:MAR=001111111110;
000000100011:MAR=001111111110;
000000100100:MAR=001111111110;
000000100101:MAR=011111111111;//37
endcase
end

if(DRE)
begin
begin
case(MAR)
000000000000:IR=data_memory[0];
000000000001:IR=data_memory[1];
000000000010:IR=data_memory[2];
000000000011:IR=data_memory[3];
000000000100:IR=data_memory[4];
000000000101:IR=data_memory[5];
000000000110:IR=data_memory[6];
000000000111:IR=data_memory[7];
000000001000:IR=data_memory[8];
000000001001:IR=data_memory[9];
000000001010:IR=data_memory[10];
000000001011:IR=data_memory[11];
000000001100:IR=data_memory[12];
000000001101:IR=data_memory[13];
000000001110:IR=data_memory[14];
000000001111:IR=data_memory[15];
000000010000:IR=data_memory[16];
000000010001:IR=data_memory[17];
000000010010:IR=data_memory[18];
000000010011:IR=data_memory[19];
000000010100:IR=data_memory[20];
000000010101:IR=data_memory[21];
000000010110:IR=data_memory[22];
000000010111:IR=data_memory[23];
000000011000:IR=data_memory[24];
000000011001:IR=data_memory[25];
000000011010:IR=data_memory[26];
000000011011:IR=data_memory[27];
000000011100:IR=data_memory[28];
000000011101:IR=data_memory[29];
000000011110:IR=data_memory[30];
000000011111:IR=data_memory[31];
//...
//000001111101:IR=data_memory[125];
endcase
end

end
endmodule
